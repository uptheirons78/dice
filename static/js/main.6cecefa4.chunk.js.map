{"version":3,"sources":["Die.js","RollDice.js","App.js","serviceWorker.js","index.js"],"names":["Die","_this$props","this","props","face","rolling","icon","concat","react_default","a","createElement","className","Component","RollDice","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","roll","sides","num1","Math","floor","random","length","num2","newDie1","newDie2","setState","die1","die2","setTimeout","state","_this$state","src_Die_0","onClick","disabled","defaultProps","App","src_RollDice_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAeeA,0LATJ,IAAAC,EACmBC,KAAKC,MAAvBC,EADDH,EACCG,KAAMC,EADPJ,EACOI,QACRC,EAAI,eAAAC,OAAkBH,GAG5B,OAAOI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,OAAAJ,OAAUD,EAAV,KAAAC,OAAoBF,EAAU,UAAY,aAN/CO,cCAZC,qBAMJ,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,KAAMC,KAORiB,KAAO,WAAM,IACHC,EAAUP,EAAKX,MAAfkB,MACFC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMK,QACxCC,EAAOJ,KAAKC,MAAMD,KAAKE,SAAWJ,EAAMK,QACxCE,EAAUP,EAAMC,GAChBO,EAAUR,EAAMM,GAGtBb,EAAKgB,SAAS,CAAEC,KAAMH,EAASI,KAAMH,EAASxB,SAAS,IAGvD4B,WAAW,WACTnB,EAAKgB,SAAS,CAAEzB,SAAS,KACxB,MAlBHS,EAAKoB,MAAQ,CAAEH,KAAM,MAAOC,KAAM,MAAO3B,SAAS,GAHjCS,wEAyBV,IAAAqB,EACyBjC,KAAKgC,MAA7BH,EADDI,EACCJ,KAAMC,EADPG,EACOH,KAAM3B,EADb8B,EACa9B,QACpB,OAEEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAC0B,EAAD,CAAKhC,KAAO2B,EAAO1B,QAAUA,IAC7BG,EAAAC,EAAAC,cAAC0B,EAAD,CAAKhC,KAAO4B,EAAO3B,QAAUA,KAE/BG,EAAAC,EAAAC,cAAA,UAAQ2B,QAAUnC,KAAKkB,KAAOkB,SAAWjC,GACrCA,EAAU,aAAe,qBAzCdO,cAAjBC,EAEG0B,aAAe,CACpBlB,MAAO,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,QA6CpCR,QCvCA2B,0LARX,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC+B,EAAD,cAJU7B,cCQE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6cecefa4.chunk.js","sourcesContent":["import React, { Component } from 'react'; //import React and Component\r\nimport './Die.css'; //import component css file\r\n\r\n//let's render a simple icon element called Die\r\n//prettier-ignore\r\nclass Die extends Component {\r\n  render() {\r\n    const { face, rolling } = this.props; //this.props.face - Obj Destruc ES6\r\n    const icon = `fas fa-dice-${face}`; //create a class var\r\n\r\n    //return a dynamic icon based on this.props.face\r\n    return <i className={`Die ${ icon } ${ rolling ? 'shaking' : '' }`} />;\r\n  }\r\n}\r\n\r\nexport default Die; //export the Component\r\n","import React, { Component } from 'react'; //import React and Component\r\nimport Die from './Die'; //import Die Component\r\nimport './RollDice.css'; //import component css file\r\n\r\n//let's render a simple icon element called Die\r\nclass RollDice extends Component {\r\n  //create an array with all possibilities of dice faces\r\n  static defaultProps = {\r\n    sides: ['one', 'two', 'three', 'four', 'five', 'six']\r\n  };\r\n  //need a constructor to work with State\r\n  constructor(props) {\r\n    super(props);\r\n    //set the starting state at face one\r\n    this.state = { die1: 'one', die2: 'one', rolling: false };\r\n  }\r\n\r\n  //create a method to roll the dice\r\n  //arrow function to avoid binding this in the constructor\r\n  roll = () => {\r\n    const { sides } = this.props; //this.props.sides\r\n    const num1 = Math.floor(Math.random() * sides.length); //random num from 0 to 5 the length of sides array\r\n    const num2 = Math.floor(Math.random() * sides.length); //random num from 0 to 5 the length of sides array\r\n    const newDie1 = sides[num1]; //pick a value from the sides array\r\n    const newDie2 = sides[num2]; //pick a value from the sides array\r\n\r\n    //set the new State with the two value picked!\r\n    this.setState({ die1: newDie1, die2: newDie2, rolling: true });\r\n\r\n    //set rolling back to false after one second\r\n    setTimeout(() => {\r\n      this.setState({ rolling: false });\r\n    }, 1000);\r\n  };\r\n\r\n  //prettier-ignore\r\n  render() {\r\n    const { die1, die2, rolling } = this.state;\r\n    return (\r\n      //render two dice with their states changing on click events\r\n      <div className=\"RollDice\">\r\n        <div className=\"RollDice-container\">\r\n          <Die face={ die1 } rolling={ rolling } />\r\n          <Die face={ die2 } rolling={ rolling } />\r\n        </div>\r\n        <button onClick={ this.roll } disabled={ rolling }>\r\n          { rolling ? 'Rolling...' : 'Roll Dice' }\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RollDice; //export the Component\r\n","import React, { Component } from 'react';\nimport RollDice from './RollDice';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <RollDice />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}